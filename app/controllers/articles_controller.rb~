class ArticlesController < ApplicationController
  before_action :set_article, only: [:show, :edit, :update, :destroy]

  # GET /articles
  # GET /articles.json
  def index
	require 'sqlite3'
	require 'twitter'
	db = SQLite3::Database.open "./db/Twitter_app.db"
	  db.execute "CREATE TABLE IF NOT EXISTS tweets(
	    id INTEGER PRIMARY KEY AUTOINCREMENT, 
	    text TEXT,
		user TEXT)"
	client = Twitter::Streaming::Client.new do |config|
  		config.consumer_key        = "6lbKKtoGUNt1HqmXp5OTfpnSu"
  		config.consumer_secret     = "m0rkrkbmn5sDuXcJFBSJRmrzcEYEBXx95k80nH738JrxdFpl7h"
  		config.access_token        = "777522674-swQ5cJqfqSnzf2CCJgDSWLaVkRpr5XogBmyKCQGJ"
  		config.access_token_secret = "MQuAZO0kJ4JGxTNYQlsdLgRN02RYHChpMLOBQZt6aRMWv"
	end
	topics = ["entel_ayuda celular","AyudaMovistarCL celular", "ClaroTeAyuda celular" ]
	contador = 0
	@tweets = []	
	client.filter(:track => topics.join(",")) do |object|
		contador += 1
		if contador > 2
			break
  		else
  			puts object.text if object.is_a?(Twitter::Tweet)
  			puts contador 
  			@tweets.push object.text if object.is_a?(Twitter::Tweet)
			db.execute( "INSERT INTO tweets(
		      	'text','user') values(?,?)", [object.text],[object.user.screen_name])
			#@tweets.push contador
  			#@tweets = object.text if object.is_a?(Twitter::Tweet)
  		end
  	end

    #@articles = Article.all
	  end

  # GET /articles/1
  # GET /articles/1.json
  def show
  end

  # GET /articles/new
  def new
    @article = Article.new
  end

  # GET /articles/1/edit
  def edit
  end

  # POST /articles
  # POST /articles.json
  def create
    @article = Article.new(article_params)

    respond_to do |format|
      if @article.save
        format.html { redirect_to @article, notice: 'Article was successfully created.' }
        format.json { render :show, status: :created, location: @article }
      else
        format.html { render :new }
        format.json { render json: @article.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /articles/1
  # PATCH/PUT /articles/1.json
  def update
    respond_to do |format|
      if @article.update(article_params)
        format.html { redirect_to @article, notice: 'Article was successfully updated.' }
        format.json { render :show, status: :ok, location: @article }
      else
        format.html { render :edit }
        format.json { render json: @article.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /articles/1
  # DELETE /articles/1.json
  def destroy
    @article.destroy
    respond_to do |format|
      format.html { redirect_to articles_url, notice: 'Article was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_article
      @article = Article.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def article_params
      params.require(:article).permit(:title, :body)
    end
end
